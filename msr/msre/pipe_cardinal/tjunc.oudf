// Boundary conditions
void velocityDirichletConditions(bcData *bc)
{
  bc->u = 0.0;
  bc->v = 0.0;
  bc->w = 0.0;
  if(bc->id==1) { //vertical inlet
     bc->v =-1.0; 
    }
  if(bc->id==2) { //horizontal inlet
     bc->w = 1.0;
    }
}

void scalarDirichletConditions(bcData *bc)
{
  bc->s = 0.0;
  if(bc->id==1) { //vertical inlet
     bc->s = 1.0;
    }
}

@kernel void cliptOKL(const dlong Nelements,
                   @restrict dfloat * TEMP)
{
 for(dlong e=0;e<Nelements;++e;@outer(0)){
   for(int n=0;n<p_Np;++n;@inner(0)){
     const int id = e*p_Np + n;
     if(TEMP[id]>1.0)
          {
          TEMP[id] = 1.0;
          }
     if(TEMP[id]<0.0)
          {
          TEMP[id] = 0.0;
          }
   }
 }
}

@kernel void cFill(const dlong Nelements,
                   const dfloat CONST1,
                   const dfloat CONST2,
                   @ restrict const dlong *eInfo,
                   @ restrict dfloat *QVOL)
{
  for (dlong e = 0; e < Nelements; ++e; @outer(0)) {
    const dlong solid = eInfo[e];
    for (int n = 0; n < p_Np; ++n; @inner(0)) {
      const int id = e * p_Np + n;
      QVOL[id] = CONST1;
      if (solid) {
        QVOL[id] = CONST2;
      }
    }
  }
}
